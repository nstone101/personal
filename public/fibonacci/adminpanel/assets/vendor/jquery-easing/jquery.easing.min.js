(function(factory){if(typeof define==="function"&&define.amd){define(["jquery"],function($){return factory($)})}else if(typeof module==="object"&&typeof module.exports==="object"){exports=factory(require("jquery"))}else{factory(jQuery)}})(function($){$.easing.jswing=$.easing.swing;var pow=Math.pow,sqrt=Math.sqrt,sin=Math.sin,cos=Math.cos,PI=Math.PI,c1=1.70158,c2=c1*1.525,c3=c1+1,c4=2*PI/3,c5=2*PI/4.5;function bounceOut(x){var n1=7.5625,d1=2.75;if(x<1/d1){return n1*x*x}else if(x<2/d1){return n1*(x-=1.5/d1)*x+.75}else if(x<2.5/d1){return n1*(x-=2.25/d1)*x+.9375}else{return n1*(x-=2.625/d1)*x+.984375}}$.extend($.easing,{def:"easeOutQuad",swing:function(x){return $.easing[$.easing.def](x)},easeInQuad:function(x){return x*x},easeOutQuad:function(x){return 1-(1-x)*(1-x)},easeInOutQuad:function(x){return x<.5?2*x*x:1-pow(-2*x+2,2)/2},easeInCubic:function(x){return x*x*x},easeOutCubic:function(x){return 1-pow(1-x,3)},easeInOutCubic:function(x){return x<.5?4*x*x*x:1-pow(-2*x+2,3)/2},easeInQuart:function(x){return x*x*x*x},easeOutQuart:function(x){return 1-pow(1-x,4)},easeInOutQuart:function(x){return x<.5?8*x*x*x*x:1-pow(-2*x+2,4)/2},easeInQuint:function(x){return x*x*x*x*x},easeOutQuint:function(x){return 1-pow(1-x,5)},easeInOutQuint:function(x){return x<.5?16*x*x*x*x*x:1-pow(-2*x+2,5)/2},easeInSine:function(x){return 1-cos(x*PI/2)},easeOutSine:function(x){return sin(x*PI/2)},easeInOutSine:function(x){return-(cos(PI*x)-1)/2},easeInExpo:function(x){return x===0?0:pow(2,10*x-10)},easeOutExpo:function(x){return x===1?1:1-pow(2,-10*x)},easeInOutExpo:function(x){return x===0?0:x===1?1:x<.5?pow(2,20*x-10)/2:(2-pow(2,-20*x+10))/2},easeInCirc:function(x){return 1-sqrt(1-pow(x,2))},easeOutCirc:function(x){return sqrt(1-pow(x-1,2))},easeInOutCirc:function(x){return x<.5?(1-sqrt(1-pow(2*x,2)))/2:(sqrt(1-pow(-2*x+2,2))+1)/2},easeInElastic:function(x){return x===0?0:x===1?1:-pow(2,10*x-10)*sin((x*10-10.75)*c4)},easeOutElastic:function(x){return x===0?0:x===1?1:pow(2,-10*x)*sin((x*10-.75)*c4)+1},easeInOutElastic:function(x){return x===0?0:x===1?1:x<.5?-(pow(2,20*x-10)*sin((20*x-11.125)*c5))/2:pow(2,-20*x+10)*sin((20*x-11.125)*c5)/2+1},easeInBack:function(x){return c3*x*x*x-c1*x*x},easeOutBack:function(x){return 1+c3*pow(x-1,3)+c1*pow(x-1,2)},easeInOutBack:function(x){return x<.5?pow(2*x,2)*((c2+1)*2*x-c2)/2:(pow(2*x-2,2)*((c2+1)*(x*2-2)+c2)+2)/2},easeInBounce:function(x){return 1-bounceOut(1-x)},easeOutBounce:bounceOut,easeInOutBounce:function(x){return x<.5?(1-bounceOut(1-2*x))/2:(1+bounceOut(2*x-1))/2}})});
/*!
 * jquery-timepicker v1.13.0 - A jQuery timepicker plugin inspired by Google Calendar. It supports both mouse and keyboard navigation.
 * Copyright (c) 2015 Jon Thornton - http://jonthornton.github.com/jquery-timepicker/
 * License: MIT
 */
(function(factory) {
    if (
        typeof exports === "object" &&
        exports &&
        typeof module === "object" &&
        module &&
        module.exports === exports
    ) {
        // Browserify. Attach to jQuery module.
        factory(require("jquery"));
    } else if (typeof define === "function" && define.amd) {
        // AMD. Register as an anonymous module.
        define(["jquery"], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
})(function($) {
    var _ONE_DAY = 86400;
    var _lang = {
        am: "am",
        pm: "pm",
        AM: "AM",
        PM: "PM",
        decimal: ".",
        mins: "mins",
        hr: "hr",
        hrs: "hrs"
    };

    var methods = {
        init: function(options) {
            return this.each(function() {
                var self = $(this);

                // pick up settings from data attributes
                var attributeOptions = [];
                for (var key in $.fn.timepicker.defaults) {
                    if (self.data(key)) {
                        attributeOptions[key] = self.data(key);
                    }
                }

                var settings = $.extend({}, $.fn.timepicker.defaults, options, attributeOptions);

                if (settings.lang) {
                    _lang = $.extend(_lang, settings.lang);
                }

                settings = _parseSettings(settings);
                self.data("timepicker-settings", settings);
                self.addClass("ui-timepicker-input");

                if (settings.useSelect) {
                    _render(self);
                } else {
                    self.prop("autocomplete", "off");
                    if (settings.showOn) {
                        for (var i in settings.showOn) {
                            self.on(settings.showOn[i] + ".timepicker", methods.show);
                        }
                    }
                    self.on("change.timepicker", _formatValue);
                    self.on("keydown.timepicker", _keydownhandler);
                    self.on("keyup.timepicker", _keyuphandler);
                    if (settings.disableTextInput) {
                        self.on("keydown.timepicker", _disableTextInputHandler);
                    }
                    self.on("cut.timepicker", _keyuphandler);
                    self.on("paste.timepicker", _keyuphandler);

                    _formatValue.call(self.get(0), null, "initial");
                }
            });
        },

        show: function(e) {
            var self = $(this);
            var settings = self.data("timepicker-settings");

            if (e) {
                e.preventDefault();
            }

            if (settings.useSelect) {
                self.data("timepicker-list").focus();
                return;
            }

            if (_hideKeyboard(self)) {
                // block the keyboard on mobile devices
                self.blur();
            }

            var list = self.data("timepicker-list");

            // check if input is readonly
            if (self.prop("readonly")) {
                return;
            }

            // check if list needs to be rendered
            if (
                !list ||
                list.length === 0 ||
                typeof settings.durationTime === "function"
            ) {
                _render(self);
                list = self.data("timepicker-list");
            }

            if (_isVisible(list)) {
                return;
            }

            self.data("ui-timepicker-value", self.val());
            _setSelected(self, list);

            // make sure other pickers are hidden
            methods.hide();

            if (typeof settings.listWidth == 'number') {
                console.log(settings.listWidth)
                list.width(self.outerWidth() * settings.listWidth);
            }

            // position the dropdown relative to the input
            list.show();
            var listOffset = {};

            if (settings.orientation.match(/r/)) {
                // right-align the dropdown
                listOffset.left =
                    self.offset().left +
                    self.outerWidth() -
                    list.outerWidth() +
                    parseInt(list.css("marginLeft").replace("px", ""), 10);
            } else if (settings.orientation.match(/l/)) {
                // left-align the dropdown
                listOffset.left =
                    self.offset().left +
                    parseInt(list.css("marginLeft").replace("px", ""), 10);
            } else if (settings.orientation.match(/c/)) {
                // center-align the dropdown
                listOffset.left =
                    self.offset().left +
                    ((self.outerWidth() - list.outerWidth()) / 2) +
                    parseInt(list.css("marginLeft").replace("px", ""), 10);
            }

            var verticalOrientation;
            if (settings.orientation.match(/t/)) {
                verticalOrientation = "t";
            } else if (settings.orientation.match(/b/)) {
                verticalOrientation = "b";
            } else if (
                self.offset().top + self.outerHeight(true) + list.outerHeight() >
                $(window).height() + $(window).scrollTop()
            ) {
                verticalOrientation = "t";
            } else {
                verticalOrientation = "b";
            }

            if (verticalOrientation == "t") {
                // position the dropdown on top
                list.addClass("ui-timepicker-positioned-top");
                listOffset.top =
                    self.offset().top -
                    list.outerHeight() +
                    parseInt(list.css("marginTop").replace("px", ""), 10);
            } else {
                // put it under the input
                list.removeClass("ui-timepicker-positioned-top");
                listOffset.top =
                    self.offset().top +
                    self.outerHeight() +
                    parseInt(list.css("marginTop").replace("px", ""), 10);
            }

            list.offset(listOffset);

            // position scrolling
            var selected = list.find(".ui-timepicker-selected");

            if (!selected.length) {
                var timeInt = _time2int(_getTimeValue(self));
                if (timeInt !== null) {
                    selected = _findRow(self, list, timeInt);
                } else if (settings.scrollDefault) {
                    selected = _findRow(self, list, settings.scrollDefault());
                }
            }

            // if not found or disabled, intelligently find first selectable element
            if (!selected.length || selected.hasClass("ui-timepicker-disabled")) {
                selected = list.find("li:not(.ui-timepicker-disabled):first");
            }

            if (selected && selected.length) {
                var topOffset =
                    list.scrollTop() + selected.position().top - selected.outerHeight();
                list.scrollTop(topOffset);
            } else {
                list.scrollTop(0);
            }

            // prevent scroll propagation
            if (settings.stopScrollPropagation) {
                $(
                    document
                ).on("wheel.ui-timepicker", ".ui-timepicker-wrapper", function(e) {
                    e.preventDefault();
                    var currentScroll = $(this).scrollTop();
                    $(this).scrollTop(currentScroll + e.originalEvent.deltaY);
                });
            }

            // attach close handlers
            $(document).on(
                "touchstart.ui-timepicker mousedown.ui-timepicker",
                _closeHandler
            );
            $(window).on("resize.ui-timepicker", _closeHandler);
            if (settings.closeOnWindowScroll) {
                $(document).on("scroll.ui-timepicker", _closeHandler);
            }

            self.trigger("showTimepicker");

            return this;
        },

        hide: function(e) {
            var self = $(this);
            var settings = self.data("timepicker-settings");

            if (settings && settings.useSelect) {
                self.blur();
            }

            $(".ui-timepicker-wrapper").each(function() {
                var list = $(this);
                if (!_isVisible(list)) {
                    return;
                }

                var self = list.data("timepicker-input");
                var settings = self.data("timepicker-settings");

                if (settings && settings.selectOnBlur) {
                    _selectValue(self);
                }

                list.hide();
                self.trigger("hideTimepicker");
            });

            return this;
        },

        option: function(key, value) {
            if (typeof key == "string" && typeof value == "undefined") {
                return $(this).data("timepicker-settings")[key];
            }

            return this.each(function() {
                var self = $(this);
                var settings = self.data("timepicker-settings");
                var list = self.data("timepicker-list");

                if (typeof key == "object") {
                    settings = $.extend(settings, key);
                } else if (typeof key == "string") {
                    settings[key] = value;
                }

                settings = _parseSettings(settings);

                self.data("timepicker-settings", settings);

                _formatValue.call(self.get(0), { type: "change" }, "initial");

                if (list) {
                    list.remove();
                    self.data("timepicker-list", false);
                }

                if (settings.useSelect) {
                    _render(self);
                }
            });
        },

        getSecondsFromMidnight: function() {
            return _time2int(_getTimeValue(this));
        },

        getTime: function(relative_date) {
            var self = this;

            var time_string = _getTimeValue(self);
            if (!time_string) {
                return null;
            }

            var offset = _time2int(time_string);
            if (offset === null) {
                return null;
            }

            if (!relative_date) {
                relative_date = new Date();
            }

            // construct a Date from relative date, and offset's time
            var time = new Date(relative_date);
            time.setHours(offset / 3600);
            time.setMinutes((offset % 3600) / 60);
            time.setSeconds(offset % 60);
            time.setMilliseconds(0);

            return time;
        },

        isVisible: function() {
            var self = this;
            var list = self.data("timepicker-list");
            return !!(list && _isVisible(list));
        },

        setTime: function(value) {
            var self = this;
            var settings = self.data("timepicker-settings");

            if (settings.forceRoundTime) {
                var prettyTime = _roundAndFormatTime(_time2int(value), settings);
            } else {
                var prettyTime = _int2time(_time2int(value), settings);
            }

            if (value && prettyTime === null && settings.noneOption) {
                prettyTime = value;
            }

            _setTimeValue(self, prettyTime, "initial");
            _formatValue.call(self.get(0), { type: "change" }, "initial");

            if (self.data("timepicker-list")) {
                _setSelected(self, self.data("timepicker-list"));
            }

            return this;
        },

        remove: function() {
            var self = this;

            // check if this element is a timepicker
            if (!self.hasClass("ui-timepicker-input")) {
                return;
            }

            var settings = self.data("timepicker-settings");
            self.removeAttr("autocomplete", "off");
            self.removeClass("ui-timepicker-input");
            self.removeData("timepicker-settings");
            self.off(".timepicker");

            // timepicker-list won't be present unless the user has interacted with this timepicker
            if (self.data("timepicker-list")) {
                self.data("timepicker-list").remove();
            }

            if (settings.useSelect) {
                self.show();
            }

            self.removeData("timepicker-list");

            return this;
        }
    };

    // private methods

    function _isVisible(elem) {
        var el = elem[0];
        return el.offsetWidth > 0 && el.offsetHeight > 0;
    }

    function _parseSettings(settings) {
        if (settings.minTime) {
            settings.minTime = _time2int(settings.minTime);
        }

        if (settings.maxTime) {
            settings.maxTime = _time2int(settings.maxTime);
        }

        if (settings.durationTime && typeof settings.durationTime !== "function") {
            settings.durationTime = _time2int(settings.durationTime);
        }

        if (settings.scrollDefault == "now") {
            settings.scrollDefault = function() {
                return settings.roundingFunction(_time2int(new Date()), settings);
            };
        } else if (
            settings.scrollDefault &&
            typeof settings.scrollDefault != "function"
        ) {
            var val = settings.scrollDefault;
            settings.scrollDefault = function() {
                return settings.roundingFunction(_time2int(val), settings);
            };
        } else if (settings.minTime) {
            settings.scrollDefault = function() {
                return settings.roundingFunction(settings.minTime, settings);
            };
        }

        if (
            $.type(settings.timeFormat) === "string" &&
            settings.timeFormat.match(/[gh]/)
        ) {
            settings._twelveHourTime = true;
        }

        if (
            settings.showOnFocus === false &&
            settings.showOn.indexOf("focus") != -1
        ) {
            settings.showOn.splice(settings.showOn.indexOf("focus"), 1);
        }

        if (settings.disableTimeRanges.length > 0) {
            // convert string times to integers
            for (var i in settings.disableTimeRanges) {
                settings.disableTimeRanges[i] = [
                    _time2int(settings.disableTimeRanges[i][0]),
                    _time2int(settings.disableTimeRanges[i][1])
                ];
            }

            // sort by starting time
            settings.disableTimeRanges = settings.disableTimeRanges.sort(function(
                a,
                b
            ) {
                return a[0] - b[0];
            });

            // merge any overlapping ranges
            for (var i = settings.disableTimeRanges.length - 1; i > 0; i--) {
                if (
                    settings.disableTimeRanges[i][0] <=
                    settings.disableTimeRanges[i - 1][1]
                ) {
                    settings.disableTimeRanges[i - 1] = [
                        Math.min(
                            settings.disableTimeRanges[i][0],
                            settings.disableTimeRanges[i - 1][0]
                        ),
                        Math.max(
                            settings.disableTimeRanges[i][1],
                            settings.disableTimeRanges[i - 1][1]
                        )
                    ];
                    settings.disableTimeRanges.splice(i, 1);
                }
            }
        }

        return settings;
    }

    function _render(self) {
        var settings = self.data("timepicker-settings");
        var list = self.data("timepicker-list");

        if (list && list.length) {
            list.remove();
            self.data("timepicker-list", false);
        }

        if (settings.useSelect) {
            list = $("<select />", { class: "ui-timepicker-select" });
            if (self.attr('name')) {
                list.attr('name', 'ui-timepicker-' + self.attr('name'));
            }
            var wrapped_list = list;
        } else {
            list = $("<ul />", { class: "ui-timepicker-list" });

            var wrapped_list = $("<div />", {
                class: "ui-timepicker-wrapper",
                tabindex: -1
            });
            wrapped_list.css({ display: "none", position: "absolute" }).append(list);
        }

        if (settings.noneOption) {
            if (settings.noneOption === true) {
                settings.noneOption = settings.useSelect ? "Time..." : "None";
            }

            if ($.isArray(settings.noneOption)) {
                for (var i in settings.noneOption) {
                    if (parseInt(i, 10) == i) {
                        var noneElement = _generateNoneElement(
                            settings.noneOption[i],
                            settings.useSelect
                        );
                        list.append(noneElement);
                    }
                }
            } else {
                var noneElement = _generateNoneElement(
                    settings.noneOption,
                    settings.useSelect
                );
                list.append(noneElement);
            }
        }

        if (settings.className) {
            wrapped_list.addClass(settings.className);
        }

        if (
            (settings.minTime !== null || settings.durationTime !== null) &&
            settings.showDuration
        ) {
            var stepval =
                typeof settings.step == "function" ? "function" : settings.step;
            wrapped_list.addClass("ui-timepicker-with-duration");
            wrapped_list.addClass("ui-timepicker-step-" + settings.step);
        }

        var durStart = settings.minTime;
        if (typeof settings.durationTime === "function") {
            durStart = _time2int(settings.durationTime());
        } else if (settings.durationTime !== null) {
            durStart = settings.durationTime;
        }
        var start = settings.minTime !== null ? settings.minTime : 0;
        var end =
            settings.maxTime !== null ? settings.maxTime : start + _ONE_DAY - 1;

        if (end < start) {
            // make sure the end time is greater than start time, otherwise there will be no list to show
            end += _ONE_DAY;
        }

        if (
            end === _ONE_DAY - 1 &&
            $.type(settings.timeFormat) === "string" &&
            settings.show2400
        ) {
            // show a 24:00 option when using military time
            end = _ONE_DAY;
        }

        var dr = settings.disableTimeRanges;
        var drCur = 0;
        var drLen = dr.length;

        var stepFunc = settings.step;
        if (typeof stepFunc != "function") {
            stepFunc = function() {
                return settings.step;
            };
        }

        for (var i = start, j = 0; i <= end; j++, i += stepFunc(j) * 60) {
            var timeInt = i;
            var timeString = _int2time(timeInt, settings);

            if (settings.useSelect) {
                var row = $("<option />", { value: timeString });
                row.text(timeString);
            } else {
                var row = $("<li />");
                row.addClass(
                    timeInt % _ONE_DAY < _ONE_DAY / 2
                        ? "ui-timepicker-am"
                        : "ui-timepicker-pm"
                );
                row.data("time", _moduloSeconds(timeInt, settings));
                row.text(timeString);
            }

            if (
                (settings.minTime !== null || settings.durationTime !== null) &&
                settings.showDuration
            ) {
                var durationString = _int2duration(i - durStart, settings.step);
                if (settings.useSelect) {
                    row.text(row.text() + " (" + durationString + ")");
                } else {
                    var duration = $("<span />", { class: "ui-timepicker-duration" });
                    duration.text(" (" + durationString + ")");
                    row.append(duration);
                }
            }

            if (drCur < drLen) {
                if (timeInt >= dr[drCur][1]) {
                    drCur += 1;
                }

                if (dr[drCur] && timeInt >= dr[drCur][0] && timeInt < dr[drCur][1]) {
                    if (settings.useSelect) {
                        row.prop("disabled", true);
                    } else {
                        row.addClass("ui-timepicker-disabled");
                    }
                }
            }

            list.append(row);
        }

        wrapped_list.data("timepicker-input", self);
        self.data("timepicker-list", wrapped_list);

        if (settings.useSelect) {
            if (self.val()) {
                list.val(_roundAndFormatTime(_time2int(self.val()), settings));
            }

            list.on("focus", function() {
                $(this)
                    .data("timepicker-input")
                    .trigger("showTimepicker");
            });
            list.on("blur", function() {
                $(this)
                    .data("timepicker-input")
                    .trigger("hideTimepicker");
            });
            list.on("change", function() {
                _setTimeValue(self, $(this).val(), "select");
            });

            _setTimeValue(self, list.val(), "initial");
            self.hide().after(list);
        } else {
            var appendTo = settings.appendTo;
            if (typeof appendTo === "string") {
                appendTo = $(appendTo);
            } else if (typeof appendTo === "function") {
                appendTo = appendTo(self);
            }
            appendTo.append(wrapped_list);
            _setSelected(self, list);

            list.on("mousedown click", "li", function(e) {
                // hack: temporarily disable the focus handler
                // to deal with the fact that IE fires 'focus'
                // events asynchronously
                self.off("focus.timepicker");
                self.on("focus.timepicker-ie-hack", function() {
                    self.off("focus.timepicker-ie-hack");
                    self.on("focus.timepicker", methods.show);
                });

                if (!_hideKeyboard(self)) {
                    self[0].focus();
                }

                // make sure only the clicked row is selected
                list.find("li").removeClass("ui-timepicker-selected");
                $(this).addClass("ui-timepicker-selected");

                if (_selectValue(self)) {
                    self.trigger("hideTimepicker");

                    list.on("mouseup.timepicker click.timepicker", "li", function(e) {
                        list.off("mouseup.timepicker click.timepicker");
                        wrapped_list.hide();
                    });
                }
            });
        }
    }

    function _generateNoneElement(optionValue, useSelect) {
        var label, className, value;

        if (typeof optionValue == "object") {
            label = optionValue.label;
            className = optionValue.className;
            value = optionValue.value;
        } else if (typeof optionValue == "string") {
            label = optionValue;
            value = '';
        } else {
            $.error("Invalid noneOption value");
        }

        if (useSelect) {
            return $("<option />", {
                value: value,
                class: className,
                text: label
            });
        } else {
            return $("<li />", {
                class: className,
                text: label
            }).data("time", String(value));
        }
    }

    function _roundAndFormatTime(seconds, settings) {
        seconds = settings.roundingFunction(seconds, settings);
        if (seconds !== null) {
            return _int2time(seconds, settings);
        }
    }

    // event handler to decide whether to close timepicker
    function _closeHandler(e) {
        if (e.target == window) {
            // mobile Chrome fires focus events against window for some reason
            return;
        }

        var target = $(e.target);

        if (
            target.closest(".ui-timepicker-input").length ||
            target.closest(".ui-timepicker-wrapper").length
        ) {
            // active timepicker was focused. ignore
            return;
        }

        methods.hide();
        $(document).unbind(".ui-timepicker");
        $(window).unbind(".ui-timepicker");
    }

    function _hideKeyboard(self) {
        var settings = self.data("timepicker-settings");
        return (
            (window.navigator.msMaxTouchPoints || "ontouchstart" in document) &&
            settings.disableTouchKeyboard
        );
    }

    function _findRow(self, list, value) {
        if (!value && value !== 0) {
            return false;
        }

        var settings = self.data("timepicker-settings");
        var out = false;
        var value = settings.roundingFunction(value, settings);

        // loop through the menu items
        list.find("li").each(function(i, obj) {
            var jObj = $(obj);
            if (typeof jObj.data("time") != "number") {
                return;
            }

            if (jObj.data("time") == value) {
                out = jObj;
                return false;
            }
        });

        return out;
    }

    function _setSelected(self, list) {
        list.find("li").removeClass("ui-timepicker-selected");

        var settings = self.data("timepicker-settings");
        var timeValue = _time2int(_getTimeValue(self), settings);
        if (timeValue === null) {
            return;
        }

        var selected = _findRow(self, list, timeValue);
        if (selected) {
            var topDelta = selected.offset().top - list.offset().top;

            if (
                topDelta + selected.outerHeight() > list.outerHeight() ||
                topDelta < 0
            ) {
                list.scrollTop(
                    list.scrollTop() + selected.position().top - selected.outerHeight()
                );
            }

            if (settings.forceRoundTime || selected.data("time") === timeValue) {
                selected.addClass("ui-timepicker-selected");
            }
        }
    }

    function _formatValue(e, origin) {
        if (origin == "timepicker") {
            return;
        }

        var self = $(this);

        if (this.value === "") {
            _setTimeValue(self, null, origin);
            return;
        }

        if (self.is(":focus") && (!e || e.type != "change")) {
            return;
        }

        var settings = self.data("timepicker-settings");
        var seconds = _time2int(this.value, settings);

        if (seconds === null) {
            self.trigger("timeFormatError");
            return;
        }

        var rangeError = false;
        // check that the time in within bounds
        if (
            settings.minTime !== null &&
            settings.maxTime !== null &&
            (seconds < settings.minTime || seconds > settings.maxTime)
        ) {
            rangeError = true;
        }

        // check that time isn't within disabled time ranges
        $.each(settings.disableTimeRanges, function() {
            if (seconds >= this[0] && seconds < this[1]) {
                rangeError = true;
                return false;
            }
        });

        if (settings.forceRoundTime) {
            var roundSeconds = settings.roundingFunction(seconds, settings);
            if (roundSeconds != seconds) {
                seconds = roundSeconds;
                origin = null;
            }
        }

        var prettyTime = _int2time(seconds, settings);

        if (rangeError) {
            if (
                _setTimeValue(self, prettyTime, "error") ||
                (e && e.type == "change")
            ) {
                self.trigger("timeRangeError");
            }
        } else {
            _setTimeValue(self, prettyTime, origin);
        }
    }

    function _getTimeValue(self) {
        if (self.is("input")) {
            return self.val();
        } else {
            // use the element's data attributes to store values
            return self.data("ui-timepicker-value");
        }
    }

    function _setTimeValue(self, value, source) {
        if (self.is("input")) {
            self.val(value);

            var settings = self.data("timepicker-settings");
            if (settings.useSelect && source != "select" && self.data("timepicker-list")) {
                self
                    .data("timepicker-list")
                    .val(_roundAndFormatTime(_time2int(value), settings));
            }
        }

        if (self.data("ui-timepicker-value") != value) {
            self.data("ui-timepicker-value", value);
            if (source == "select") {
                self
                    .trigger("selectTime")
                    .trigger("changeTime")
                    .trigger("change", "timepicker");
            } else if (["error", "initial"].indexOf(source) == -1) {
                self.trigger("changeTime");
            }

            return true;
        } else {
            if (["error", "initial"].indexOf(source) == -1) {
                self.trigger("selectTime");
            }
            return false;
        }
    }

    /*
      *  Filter freeform input
      */
    function _disableTextInputHandler(e) {
        switch (e.keyCode) {
            case 13: // return
            case 9: //tab
                return;

            default:
                e.preventDefault();
        }
    }

    /*
      *  Keyboard navigation via arrow keys
      */
    function _keydownhandler(e) {
        var self = $(this);
        var list = self.data("timepicker-list");

        if (!list || !_isVisible(list)) {
            if (e.keyCode == 40) {
                // show the list!
                methods.show.call(self.get(0));
                list = self.data("timepicker-list");
                if (!_hideKeyboard(self)) {
                    self.focus();
                }
            } else {
                return true;
            }
        }

        switch (e.keyCode) {
            case 13: // return
                if (_selectValue(self)) {
                    _formatValue.call(self.get(0), { type: "change" });
                    methods.hide.apply(this);
                }

                e.preventDefault();
                return false;

            case 38: // up
                var selected = list.find(".ui-timepicker-selected");

                if (!selected.length) {
                    list.find("li").each(function(i, obj) {
                        if ($(obj).position().top > 0) {
                            selected = $(obj);
                            return false;
                        }
                    });
                    selected.addClass("ui-timepicker-selected");
                } else if (!selected.is(":first-child")) {
                    selected.removeClass("ui-timepicker-selected");
                    selected.prev().addClass("ui-timepicker-selected");

                    if (selected.prev().position().top < selected.outerHeight()) {
                        list.scrollTop(list.scrollTop() - selected.outerHeight());
                    }
                }

                return false;

            case 40: // down
                selected = list.find(".ui-timepicker-selected");

                if (selected.length === 0) {
                    list.find("li").each(function(i, obj) {
                        if ($(obj).position().top > 0) {
                            selected = $(obj);
                            return false;
                        }
                    });

                    selected.addClass("ui-timepicker-selected");
                } else if (!selected.is(":last-child")) {
                    selected.removeClass("ui-timepicker-selected");
                    selected.next().addClass("ui-timepicker-selected");

                    if (
                        selected.next().position().top + 2 * selected.outerHeight() >
                        list.outerHeight()
                    ) {
                        list.scrollTop(list.scrollTop() + selected.outerHeight());
                    }
                }

                return false;

            case 27: // escape
                list.find("li").removeClass("ui-timepicker-selected");
                methods.hide();
                break;

            case 9: //tab
                methods.hide();
                break;

            default:
                return true;
        }
    }

    /*
      *	Time typeahead
      */
    function _keyuphandler(e) {
        var self = $(this);
        var list = self.data("timepicker-list");
        var settings = self.data("timepicker-settings");

        if (!list || !_isVisible(list) || settings.disableTextInput) {
            return true;
        }

        if (e.type === "paste" || e.type === "cut") {
            setTimeout(function() {
                if (settings.typeaheadHighlight) {
                    _setSelected(self, list);
                } else {
                    list.hide();
                }
            }, 0);
            return;
        }

        switch (e.keyCode) {
            case 96: // numpad numerals
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 48: // numerals
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65: // a
            case 77: // m
            case 80: // p
            case 186: // colon
            case 8: // backspace
            case 46: // delete
                if (settings.typeaheadHighlight) {
                    _setSelected(self, list);
                } else {
                    list.hide();
                }
                break;
        }
    }

    function _selectValue(self) {
        var settings = self.data("timepicker-settings");
        var list = self.data("timepicker-list");
        var timeValue = null;

        var cursor = list.find(".ui-timepicker-selected");

        if (cursor.hasClass("ui-timepicker-disabled")) {
            return false;
        }

        if (cursor.length) {
            // selected value found
            timeValue = cursor.data("time");
        }

        if (timeValue !== null) {
            if (typeof timeValue != "string") {
                timeValue = _int2time(timeValue, settings);
            }

            _setTimeValue(self, timeValue, "select");
        }

        return true;
    }

    function _int2duration(seconds, step) {
        seconds = Math.abs(seconds);
        var minutes = Math.round(seconds / 60),
            duration = [],
            hours,
            mins;

        if (minutes < 60) {
            // Only show (x mins) under 1 hour
            duration = [minutes, _lang.mins];
        } else {
            hours = Math.floor(minutes / 60);
            mins = minutes % 60;

            // Show decimal notation (eg: 1.5 hrs) for 30 minute steps
            if (step == 30 && mins == 30) {
                hours += _lang.decimal + 5;
            }

            duration.push(hours);
            duration.push(hours == 1 ? _lang.hr : _lang.hrs);

            // Show remainder minutes notation (eg: 1 hr 15 mins) for non-30 minute steps
            // and only if there are remainder minutes to show
            if (step != 30 && mins) {
                duration.push(mins);
                duration.push(_lang.mins);
            }
        }

        return duration.join(" ");
    }

    function _int2time(timeInt, settings) {
        if (typeof timeInt != "number") {
            return null;
        }

        var seconds = parseInt(timeInt % 60),
            minutes = parseInt((timeInt / 60) % 60),
            hours = parseInt((timeInt / (60 * 60)) % 24);

        var time = new Date(1970, 0, 2, hours, minutes, seconds, 0);

        if (isNaN(time.getTime())) {
            return null;
        }

        if ($.type(settings.timeFormat) === "function") {
            return settings.timeFormat(time);
        }

        var output = "";
        var hour, code;
        for (var i = 0; i < settings.timeFormat.length; i++) {
            code = settings.timeFormat.charAt(i);
            switch (code) {
                case "a":
                    output += time.getHours() > 11 ? _lang.pm : _lang.am;
                    break;

                case "A":
                    output += time.getHours() > 11 ? _lang.PM : _lang.AM;
                    break;

                case "g":
                    hour = time.getHours() % 12;
                    output += hour === 0 ? "12" : hour;
                    break;

                case "G":
                    hour = time.getHours();
                    if (timeInt === _ONE_DAY) hour = settings.show2400 ? 24 : 0;
                    output += hour;
                    break;

                case "h":
                    hour = time.getHours() % 12;

                    if (hour !== 0 && hour < 10) {
                        hour = "0" + hour;
                    }

                    output += hour === 0 ? "12" : hour;
                    break;

                case "H":
                    hour = time.getHours();
                    if (timeInt === _ONE_DAY) hour = settings.show2400 ? 24 : 0;
                    output += hour > 9 ? hour : "0" + hour;
                    break;

                case "i":
                    var minutes = time.getMinutes();
                    output += minutes > 9 ? minutes : "0" + minutes;
                    break;

                case "s":
                    seconds = time.getSeconds();
                    output += seconds > 9 ? seconds : "0" + seconds;
                    break;

                case "\\":
                    // escape character; add the next character and skip ahead
                    i++;
                    output += settings.timeFormat.charAt(i);
                    break;

                default:
                    output += code;
            }
        }

        return output;
    }

    function _time2int(timeString, settings) {
        if (timeString === "" || timeString === null) return null;
        if (typeof timeString == "object") {
            return (
                timeString.getHours() * 3600 +
                timeString.getMinutes() * 60 +
                timeString.getSeconds()
            );
        }
        if (typeof timeString != "string") {
            return timeString;
        }

        timeString = timeString.toLowerCase().replace(/[\s\.]/g, "");

        // if the last character is an "a" or "p", add the "m"
        if (timeString.slice(-1) == "a" || timeString.slice(-1) == "p") {
            timeString += "m";
        }

        var ampmRegex =
            "(" +
            _lang.am.replace(".", "") +
            "|" +
            _lang.pm.replace(".", "") +
            "|" +
            _lang.AM.replace(".", "") +
            "|" +
            _lang.PM.replace(".", "") +
            ")?";

        // try to parse time input
        var pattern = new RegExp(
            "^" +
            ampmRegex +
            "([0-9]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?" +
            ampmRegex +
            "$"
        );

        var time = timeString.match(pattern);
        if (!time) {
            return null;
        }

        var hour = parseInt(time[2] * 1, 10);
        var ampm = time[1] || time[5];
        var hours = hour;
        var minutes = time[3] * 1 || 0;
        var seconds = time[4] * 1 || 0;

        if (hour <= 12 && ampm) {
            var isPm = ampm == _lang.pm || ampm == _lang.PM;

            if (hour == 12) {
                hours = isPm ? 12 : 0;
            } else {
                hours = hour + (isPm ? 12 : 0);
            }
        } else if (settings) {
            var t = hour * 3600 + minutes * 60 + seconds;
            if (t >= _ONE_DAY + (settings.show2400 ? 1 : 0)) {
                if (settings.wrapHours === false) {
                    return null;
                }

                hours = hour % 24;
            }
        }

        var timeInt = hours * 3600 + minutes * 60 + seconds;

        // if no am/pm provided, intelligently guess based on the scrollDefault
        if (
            hour < 12 &&
            !ampm &&
            settings &&
            settings._twelveHourTime &&
            settings.scrollDefault
        ) {
            var delta = timeInt - settings.scrollDefault();
            if (delta < 0 && delta >= _ONE_DAY / -2) {
                timeInt = (timeInt + _ONE_DAY / 2) % _ONE_DAY;
            }
        }

        return timeInt;
    }

    function _pad2(n) {
        return ("0" + n).slice(-2);
    }

    function _moduloSeconds(seconds, settings) {
        if (seconds == _ONE_DAY && settings.show2400) {
            return seconds;
        }

        return seconds % _ONE_DAY;
    }

    // Plugin entry
    $.fn.timepicker = function(method) {
        if (!this.length) return this;
        if (methods[method]) {
            // check if this element is a timepicker
            if (!this.hasClass("ui-timepicker-input")) {
                return this;
            }
            return methods[method].apply(
                this,
                Array.prototype.slice.call(arguments, 1)
            );
        } else if (typeof method === "object" || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error("Method " + method + " does not exist on jQuery.timepicker");
        }
    };

    // Default plugin options.
    $.fn.timepicker.defaults = {
        appendTo: "body",
        className: null,
        closeOnWindowScroll: false,
        disableTextInput: false,
        disableTimeRanges: [],
        disableTouchKeyboard: false,
        durationTime: null,
        forceRoundTime: false,
        listWidth: null, // Set to 1 to match input width, 2 to double input width, .5 to halve input width, etc
        maxTime: null,
        minTime: null,
        noneOption: false,
        orientation: "l",
        roundingFunction: function(seconds, settings) {
            if (seconds === null) {
                return null;
            } else if (typeof settings.step !== "number") {
                // TODO: nearest fit irregular steps
                return seconds;
            } else {
                var offset = seconds % (settings.step * 60); // step is in minutes

                var start = settings.minTime || 0;

                // adjust offset by start mod step so that the offset is aligned not to 00:00 but to the start
                offset -= start % (settings.step * 60);

                if (offset >= settings.step * 5) {
                    // if offset is larger than a half step, round up
                    seconds += settings.step * 60 - offset;
                } else {
                    // round down
                    seconds -= offset;
                }

                return _moduloSeconds(seconds, settings);
            }
        },
        scrollDefault: null,
        selectOnBlur: false,
        show2400: false,
        showDuration: false,
        showOn: ["click", "focus"],
        showOnFocus: true,
        step: 5,
        stopScrollPropagation: false,
        timeFormat: "g:ia",
        typeaheadHighlight: true,
        useSelect: false,
        wrapHours: true
    };
});
/* =========================================================
 * bootstrap-datepicker.js
 * Repo: https://github.com/eternicode/bootstrap-datepicker/
 * Demo: http://eternicode.github.io/bootstrap-datepicker/
 * Docs: http://bootstrap-datepicker.readthedocs.org/
 * Forked from http://www.eyecon.ro/bootstrap-datepicker
 * =========================================================
 * Started by Stefan Petre; improvements by Andrew Rowls + contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */
!function(t,e){var i=t(window);function a(){return new Date(Date.UTC.apply(Date,arguments))}function s(){var t=new Date;return a(t.getFullYear(),t.getMonth(),t.getDate())}function n(t){return function(){return this[t].apply(this,arguments)}}var r,h=(r={get:function(t){return this.slice(t)[0]},contains:function(t){for(var e=t&&t.valueOf(),i=0,a=this.length;i<a;i++)if(this[i].valueOf()===e)return i;return-1},remove:function(t){this.splice(t,1)},replace:function(e){e&&(t.isArray(e)||(e=[e]),this.clear(),this.push.apply(this,e))},clear:function(){this.splice(0)},copy:function(){var t=new h;return t.replace(this),t}},function(){var e=[];return e.push.apply(e,arguments),t.extend(e,r),e}),o=function(e,i){this.dates=new h,this.viewDate=s(),this.focusDate=null,this._process_options(i),this.element=t(e),this.isInline=!1,this.isInput=this.element.is("input"),this.component=!!this.element.is(".date")&&this.element.find(".add-on, .input-group-addon, .btn"),this.hasInput=this.component&&this.element.find("input").length,this.component&&0===this.component.length&&(this.component=!1),this.picker=t(f.template),this._buildEvents(),this._attachEvents(),this.isInline?this.picker.addClass("datepicker-inline").appendTo(this.element):this.picker.addClass("datepicker-dropdown dropdown-menu"),this.o.rtl&&this.picker.addClass("datepicker-rtl"),this.viewMode=this.o.startView,this.o.calendarWeeks&&this.picker.find("tfoot th.today").attr("colspan",function(t,e){return parseInt(e)+1}),this._allow_update=!1,this.setStartDate(this._o.startDate),this.setEndDate(this._o.endDate),this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled),this.fillDow(),this.fillMonths(),this._allow_update=!0,this.update(),this.showMode(),this.isInline&&this.show()};o.prototype={constructor:o,_process_options:function(e){this._o=t.extend({},this._o,e);var i=this.o=t.extend({},this._o),a=i.language;switch(p[a]||(a=a.split("-")[0],p[a]||(a=c.language)),i.language=a,i.startView){case 2:case"decade":i.startView=2;break;case 1:case"year":i.startView=1;break;default:i.startView=0}switch(i.minViewMode){case 1:case"months":i.minViewMode=1;break;case 2:case"years":i.minViewMode=2;break;default:i.minViewMode=0}i.startView=Math.max(i.startView,i.minViewMode),!0!==i.multidate&&(i.multidate=Number(i.multidate)||!1,!1!==i.multidate?i.multidate=Math.max(0,i.multidate):i.multidate=1),i.multidateSeparator=String(i.multidateSeparator),i.weekStart%=7,i.weekEnd=(i.weekStart+6)%7;var s=f.parseFormat(i.format);i.startDate!==-1/0&&(i.startDate?i.startDate instanceof Date?i.startDate=this._local_to_utc(this._zero_time(i.startDate)):i.startDate=f.parseDate(i.startDate,s,i.language):i.startDate=-1/0),i.endDate!==1/0&&(i.endDate?i.endDate instanceof Date?i.endDate=this._local_to_utc(this._zero_time(i.endDate)):i.endDate=f.parseDate(i.endDate,s,i.language):i.endDate=1/0),i.daysOfWeekDisabled=i.daysOfWeekDisabled||[],t.isArray(i.daysOfWeekDisabled)||(i.daysOfWeekDisabled=i.daysOfWeekDisabled.split(/[,\s]*/)),i.daysOfWeekDisabled=t.map(i.daysOfWeekDisabled,function(t){return parseInt(t,10)});var n=String(i.orientation).toLowerCase().split(/\s+/g),r=i.orientation.toLowerCase();if(n=t.grep(n,function(t){return/^auto|left|right|top|bottom$/.test(t)}),i.orientation={x:"auto",y:"auto"},r&&"auto"!==r)if(1===n.length)switch(n[0]){case"top":case"bottom":i.orientation.y=n[0];break;case"left":case"right":i.orientation.x=n[0]}else r=t.grep(n,function(t){return/^left|right$/.test(t)}),i.orientation.x=r[0]||"auto",r=t.grep(n,function(t){return/^top|bottom$/.test(t)}),i.orientation.y=r[0]||"auto";else;},_events:[],_secondaryEvents:[],_applyEvents:function(t){for(var e,i,a,s=0;s<t.length;s++)e=t[s][0],2===t[s].length?(i=void 0,a=t[s][1]):3===t[s].length&&(i=t[s][1],a=t[s][2]),e.on(a,i)},_unapplyEvents:function(t){for(var e,i,a,s=0;s<t.length;s++)e=t[s][0],2===t[s].length?(a=void 0,i=t[s][1]):3===t[s].length&&(a=t[s][1],i=t[s][2]),e.off(i,a)},_buildEvents:function(){this.isInput?this._events=[[this.element,{focus:t.proxy(this.show,this),keyup:t.proxy(function(e){-1===t.inArray(e.keyCode,[27,37,39,38,40,32,13,9])&&this.update()},this),keydown:t.proxy(this.keydown,this)}]]:this.component&&this.hasInput?this._events=[[this.element.find("input"),{focus:t.proxy(this.show,this),keyup:t.proxy(function(e){-1===t.inArray(e.keyCode,[27,37,39,38,40,32,13,9])&&this.update()},this),keydown:t.proxy(this.keydown,this)}],[this.component,{click:t.proxy(this.show,this)}]]:this.element.is("div")?this.isInline=!0:this._events=[[this.element,{click:t.proxy(this.show,this)}]],this._events.push([this.element,"*",{blur:t.proxy(function(t){this._focused_from=t.target},this)}],[this.element,{blur:t.proxy(function(t){this._focused_from=t.target},this)}]),this._secondaryEvents=[[this.picker,{click:t.proxy(this.click,this)}],[t(window),{resize:t.proxy(this.place,this)}],[t(document),{"mousedown touchstart":t.proxy(function(t){this.element.is(t.target)||this.element.find(t.target).length||this.picker.is(t.target)||this.picker.find(t.target).length||this.hide()},this)}]]},_attachEvents:function(){this._detachEvents(),this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents(),this._applyEvents(this._secondaryEvents)},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(e,i){var a=i||this.dates.get(-1),s=this._utc_to_local(a);this.element.trigger({type:e,date:s,dates:t.map(this.dates,this._utc_to_local),format:t.proxy(function(t,e){0===arguments.length?(t=this.dates.length-1,e=this.o.format):"string"==typeof t&&(e=t,t=this.dates.length-1),e=e||this.o.format;var i=this.dates.get(t);return f.formatDate(i,e,this.o.language)},this)})},show:function(){this.isInline||this.picker.appendTo("body"),this.picker.show(),this.place(),this._attachSecondaryEvents(),this._trigger("show")},hide:function(){this.isInline||this.picker.is(":visible")&&(this.focusDate=null,this.picker.hide().detach(),this._detachSecondaryEvents(),this.viewMode=this.o.startView,this.showMode(),this.o.forceParse&&(this.isInput&&this.element.val()||this.hasInput&&this.element.find("input").val())&&this.setValue(),this._trigger("hide"))},remove:function(){this.hide(),this._detachEvents(),this._detachSecondaryEvents(),this.picker.remove(),delete this.element.data().datepicker,this.isInput||delete this.element.data().date},_utc_to_local:function(t){return t&&new Date(t.getTime()+6e4*t.getTimezoneOffset())},_local_to_utc:function(t){return t&&new Date(t.getTime()-6e4*t.getTimezoneOffset())},_zero_time:function(t){return t&&new Date(t.getFullYear(),t.getMonth(),t.getDate())},_zero_utc_time:function(t){return t&&new Date(Date.UTC(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()))},getDates:function(){return t.map(this.dates,this._utc_to_local)},getUTCDates:function(){return t.map(this.dates,function(t){return new Date(t)})},getDate:function(){return this._utc_to_local(this.getUTCDate())},getUTCDate:function(){return new Date(this.dates.get(-1))},setDates:function(){var e=t.isArray(arguments[0])?arguments[0]:arguments;this.update.apply(this,e),this._trigger("changeDate"),this.setValue()},setUTCDates:function(){var e=t.isArray(arguments[0])?arguments[0]:arguments;this.update.apply(this,t.map(e,this._utc_to_local)),this._trigger("changeDate"),this.setValue()},setDate:n("setDates"),setUTCDate:n("setUTCDates"),setValue:function(){var t=this.getFormattedDate();this.isInput?this.element.val(t).change():this.component&&this.element.find("input").val(t).change()},getFormattedDate:function(e){void 0===e&&(e=this.o.format);var i=this.o.language;return t.map(this.dates,function(t){return f.formatDate(t,e,i)}).join(this.o.multidateSeparator)},setStartDate:function(t){this._process_options({startDate:t}),this.update(),this.updateNavArrows()},setEndDate:function(t){this._process_options({endDate:t}),this.update(),this.updateNavArrows()},setDaysOfWeekDisabled:function(t){this._process_options({daysOfWeekDisabled:t}),this.update(),this.updateNavArrows()},place:function(){if(!this.isInline){var e=this.picker.outerWidth(),a=this.picker.outerHeight(),s=i.width(),n=i.height(),r=i.scrollTop(),h=parseInt(this.element.parents().filter(function(){return"auto"!==t(this).css("z-index")}).first().css("z-index"))+10,o=this.component?this.component.parent().offset():this.element.offset(),d=this.component?this.component.outerHeight(!0):this.element.outerHeight(!1),l=this.component?this.component.outerWidth(!0):this.element.outerWidth(!1),c=o.left,u=o.top;this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"),"auto"!==this.o.orientation.x?(this.picker.addClass("datepicker-orient-"+this.o.orientation.x),"right"===this.o.orientation.x&&(c-=e-l)):(this.picker.addClass("datepicker-orient-left"),o.left<0?c-=o.left-10:o.left+e>s&&(c=s-e-10));var p,f,g=this.o.orientation.y;"auto"===g&&(p=-r+o.top-a,f=r+n-(o.top+d+a),g=Math.max(p,f)===f?"top":"bottom"),this.picker.addClass("datepicker-orient-"+g),"top"===g?u+=d:u-=a+parseInt(this.picker.css("padding-top")),this.picker.css({top:u,left:c,zIndex:h})}},_allow_update:!0,update:function(){if(this._allow_update){var e=this.dates.copy(),i=[],a=!1;arguments.length?(t.each(arguments,t.proxy(function(t,e){e instanceof Date&&(e=this._local_to_utc(e)),i.push(e)},this)),a=!0):(i=(i=this.isInput?this.element.val():this.element.data("date")||this.element.find("input").val())&&this.o.multidate?i.split(this.o.multidateSeparator):[i],delete this.element.data().date),i=t.map(i,t.proxy(function(t){return f.parseDate(t,this.o.format,this.o.language)},this)),i=t.grep(i,t.proxy(function(t){return t<this.o.startDate||t>this.o.endDate||!t},this),!0),this.dates.replace(i),this.dates.length?this.viewDate=new Date(this.dates.get(-1)):this.viewDate<this.o.startDate?this.viewDate=new Date(this.o.startDate):this.viewDate>this.o.endDate&&(this.viewDate=new Date(this.o.endDate)),a?this.setValue():i.length&&String(e)!==String(this.dates)&&this._trigger("changeDate"),!this.dates.length&&e.length&&this._trigger("clearDate"),this.fill()}},fillDow:function(){var t=this.o.weekStart,e="<tr>";if(this.o.calendarWeeks){var i='<th class="cw">&nbsp;</th>';e+=i,this.picker.find(".datepicker-days thead tr:first-child").prepend(i)}for(;t<this.o.weekStart+7;)e+='<th class="dow">'+p[this.o.language].daysMin[t++%7]+"</th>";e+="</tr>",this.picker.find(".datepicker-days thead").append(e)},fillMonths:function(){for(var t="",e=0;e<12;)t+='<span class="month">'+p[this.o.language].monthsShort[e++]+"</span>";this.picker.find(".datepicker-months td").html(t)},setRange:function(e){e&&e.length?this.range=t.map(e,function(t){return t.valueOf()}):delete this.range,this.fill()},getClassNames:function(e){var i=[],a=this.viewDate.getUTCFullYear(),s=this.viewDate.getUTCMonth(),n=new Date;return e.getUTCFullYear()<a||e.getUTCFullYear()===a&&e.getUTCMonth()<s?i.push("old"):(e.getUTCFullYear()>a||e.getUTCFullYear()===a&&e.getUTCMonth()>s)&&i.push("new"),this.focusDate&&e.valueOf()===this.focusDate.valueOf()&&i.push("focused"),this.o.todayHighlight&&e.getUTCFullYear()===n.getFullYear()&&e.getUTCMonth()===n.getMonth()&&e.getUTCDate()===n.getDate()&&i.push("today"),-1!==this.dates.contains(e)&&i.push("active"),(e.valueOf()<this.o.startDate||e.valueOf()>this.o.endDate||-1!==t.inArray(e.getUTCDay(),this.o.daysOfWeekDisabled))&&i.push("disabled"),this.range&&(e>this.range[0]&&e<this.range[this.range.length-1]&&i.push("range"),-1!==t.inArray(e.valueOf(),this.range)&&i.push("selected")),i},fill:function(){var e,i=new Date(this.viewDate),s=i.getUTCFullYear(),n=i.getUTCMonth(),r=this.o.startDate!==-1/0?this.o.startDate.getUTCFullYear():-1/0,h=this.o.startDate!==-1/0?this.o.startDate.getUTCMonth():-1/0,o=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,d=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,l=p[this.o.language].today||p.en.today||"",c=p[this.o.language].clear||p.en.clear||"";this.picker.find(".datepicker-days thead th.datepicker-switch").text(p[this.o.language].months[n]+" "+s),this.picker.find("tfoot th.today").text(l).toggle(!1!==this.o.todayBtn),this.picker.find("tfoot th.clear").text(c).toggle(!1!==this.o.clearBtn),this.updateNavArrows(),this.fillMonths();var u=a(s,n-1,28),g=f.getDaysInMonth(u.getUTCFullYear(),u.getUTCMonth());u.setUTCDate(g),u.setUTCDate(g-(u.getUTCDay()-this.o.weekStart+7)%7);var v=new Date(u);v.setUTCDate(v.getUTCDate()+42),v=v.valueOf();for(var D,m=[];u.valueOf()<v;){if(u.getUTCDay()===this.o.weekStart&&(m.push("<tr>"),this.o.calendarWeeks)){var y=new Date(+u+(this.o.weekStart-u.getUTCDay()-7)%7*864e5),w=new Date(Number(y)+(11-y.getUTCDay())%7*864e5),k=new Date(Number(k=a(w.getUTCFullYear(),0,1))+(11-k.getUTCDay())%7*864e5),_=(w-k)/864e5/7+1;m.push('<td class="cw">'+_+"</td>")}if((D=this.getClassNames(u)).push("day"),this.o.beforeShowDay!==t.noop){var C=this.o.beforeShowDay(this._utc_to_local(u));void 0===C?C={}:"boolean"==typeof C?C={enabled:C}:"string"==typeof C&&(C={classes:C}),!1===C.enabled&&D.push("disabled"),C.classes&&(D=D.concat(C.classes.split(/\s+/))),C.tooltip&&(e=C.tooltip)}D=t.unique(D),m.push('<td class="'+D.join(" ")+'"'+(e?' title="'+e+'"':"")+">"+u.getUTCDate()+"</td>"),u.getUTCDay()===this.o.weekEnd&&m.push("</tr>"),u.setUTCDate(u.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").empty().append(m.join(""));var T=this.picker.find(".datepicker-months").find("th:eq(1)").text(s).end().find("span").removeClass("active");t.each(this.dates,function(t,e){e.getUTCFullYear()===s&&T.eq(e.getUTCMonth()).addClass("active")}),(s<r||s>o)&&T.addClass("disabled"),s===r&&T.slice(0,h).addClass("disabled"),s===o&&T.slice(d+1).addClass("disabled"),m="",s=10*parseInt(s/10,10);var b=this.picker.find(".datepicker-years").find("th:eq(1)").text(s+"-"+(s+9)).end().find("td");s-=1;for(var U,M=t.map(this.dates,function(t){return t.getUTCFullYear()}),x=-1;x<11;x++)U=["year"],-1===x?U.push("old"):10===x&&U.push("new"),-1!==t.inArray(s,M)&&U.push("active"),(s<r||s>o)&&U.push("disabled"),m+='<span class="'+U.join(" ")+'">'+s+"</span>",s+=1;b.html(m)},updateNavArrows:function(){if(this._allow_update){var t=new Date(this.viewDate),e=t.getUTCFullYear(),i=t.getUTCMonth();switch(this.viewMode){case 0:this.o.startDate!==-1/0&&e<=this.o.startDate.getUTCFullYear()&&i<=this.o.startDate.getUTCMonth()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&e>=this.o.endDate.getUTCFullYear()&&i>=this.o.endDate.getUTCMonth()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"});break;case 1:case 2:this.o.startDate!==-1/0&&e<=this.o.startDate.getUTCFullYear()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&e>=this.o.endDate.getUTCFullYear()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"})}}},click:function(e){e.preventDefault();var i,s,n,r=t(e.target).closest("span, td, th");if(1===r.length)switch(r[0].nodeName.toLowerCase()){case"th":switch(r[0].className){case"datepicker-switch":this.showMode(1);break;case"prev":case"next":var h=f.modes[this.viewMode].navStep*("prev"===r[0].className?-1:1);switch(this.viewMode){case 0:this.viewDate=this.moveMonth(this.viewDate,h),this._trigger("changeMonth",this.viewDate);break;case 1:case 2:this.viewDate=this.moveYear(this.viewDate,h),1===this.viewMode&&this._trigger("changeYear",this.viewDate)}this.fill();break;case"today":var o=new Date;o=a(o.getFullYear(),o.getMonth(),o.getDate(),0,0,0),this.showMode(-2);var d="linked"===this.o.todayBtn?null:"view";this._setDate(o,d);break;case"clear":var l;this.isInput?l=this.element:this.component&&(l=this.element.find("input")),l&&l.val("").change(),this.update(),this._trigger("changeDate"),this.o.autoclose&&this.hide()}break;case"span":r.is(".disabled")||(this.viewDate.setUTCDate(1),r.is(".month")?(n=1,s=r.parent().find("span").index(r),i=this.viewDate.getUTCFullYear(),this.viewDate.setUTCMonth(s),this._trigger("changeMonth",this.viewDate),1===this.o.minViewMode&&this._setDate(a(i,s,n))):(n=1,s=0,i=parseInt(r.text(),10)||0,this.viewDate.setUTCFullYear(i),this._trigger("changeYear",this.viewDate),2===this.o.minViewMode&&this._setDate(a(i,s,n))),this.showMode(-1),this.fill());break;case"td":r.is(".day")&&!r.is(".disabled")&&(n=parseInt(r.text(),10)||1,i=this.viewDate.getUTCFullYear(),s=this.viewDate.getUTCMonth(),r.is(".old")?0===s?(s=11,i-=1):s-=1:r.is(".new")&&(11===s?(s=0,i+=1):s+=1),this._setDate(a(i,s,n)))}this.picker.is(":visible")&&this._focused_from&&t(this._focused_from).focus(),delete this._focused_from},_toggle_multidate:function(t){var e=this.dates.contains(t);if(t?-1!==e?this.dates.remove(e):this.dates.push(t):this.dates.clear(),"number"==typeof this.o.multidate)for(;this.dates.length>this.o.multidate;)this.dates.remove(0)},_setDate:function(t,e){var i;e&&"date"!==e||this._toggle_multidate(t&&new Date(t)),e&&"view"!==e||(this.viewDate=t&&new Date(t)),this.fill(),this.setValue(),this._trigger("changeDate"),this.isInput?i=this.element:this.component&&(i=this.element.find("input")),i&&i.change(),!this.o.autoclose||e&&"date"!==e||this.hide()},moveMonth:function(t,e){if(t){if(!e)return t;var i,a,s=new Date(t.valueOf()),n=s.getUTCDate(),r=s.getUTCMonth(),h=Math.abs(e);if(e=e>0?1:-1,1===h)a=-1===e?function(){return s.getUTCMonth()===r}:function(){return s.getUTCMonth()!==i},i=r+e,s.setUTCMonth(i),(i<0||i>11)&&(i=(i+12)%12);else{for(var o=0;o<h;o++)s=this.moveMonth(s,e);i=s.getUTCMonth(),s.setUTCDate(n),a=function(){return i!==s.getUTCMonth()}}for(;a();)s.setUTCDate(--n),s.setUTCMonth(i);return s}},moveYear:function(t,e){return this.moveMonth(t,12*e)},dateWithinRange:function(t){return t>=this.o.startDate&&t<=this.o.endDate},keydown:function(t){if(this.picker.is(":not(:visible)"))27===t.keyCode&&this.show();else{var e,i,a,n,r=!1,h=this.focusDate||this.viewDate;switch(t.keyCode){case 27:this.focusDate?(this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill()):this.hide(),t.preventDefault();break;case 37:case 39:if(!this.o.keyboardNavigation)break;e=37===t.keyCode?-1:1,t.ctrlKey?(i=this.moveYear(this.dates.get(-1)||s(),e),a=this.moveYear(h,e),this._trigger("changeYear",this.viewDate)):t.shiftKey?(i=this.moveMonth(this.dates.get(-1)||s(),e),a=this.moveMonth(h,e),this._trigger("changeMonth",this.viewDate)):((i=new Date(this.dates.get(-1)||s())).setUTCDate(i.getUTCDate()+e),(a=new Date(h)).setUTCDate(h.getUTCDate()+e)),this.dateWithinRange(i)&&(this.focusDate=this.viewDate=a,this.setValue(),this.fill(),t.preventDefault());break;case 38:case 40:if(!this.o.keyboardNavigation)break;e=38===t.keyCode?-1:1,t.ctrlKey?(i=this.moveYear(this.dates.get(-1)||s(),e),a=this.moveYear(h,e),this._trigger("changeYear",this.viewDate)):t.shiftKey?(i=this.moveMonth(this.dates.get(-1)||s(),e),a=this.moveMonth(h,e),this._trigger("changeMonth",this.viewDate)):((i=new Date(this.dates.get(-1)||s())).setUTCDate(i.getUTCDate()+7*e),(a=new Date(h)).setUTCDate(h.getUTCDate()+7*e)),this.dateWithinRange(i)&&(this.focusDate=this.viewDate=a,this.setValue(),this.fill(),t.preventDefault());break;case 32:break;case 13:h=this.focusDate||this.dates.get(-1)||this.viewDate,this._toggle_multidate(h),r=!0,this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.setValue(),this.fill(),this.picker.is(":visible")&&(t.preventDefault(),this.o.autoclose&&this.hide());break;case 9:this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill(),this.hide()}if(r)this.dates.length?this._trigger("changeDate"):this._trigger("clearDate"),this.isInput?n=this.element:this.component&&(n=this.element.find("input")),n&&n.change()}},showMode:function(t){t&&(this.viewMode=Math.max(this.o.minViewMode,Math.min(2,this.viewMode+t))),this.picker.find(">div").hide().filter(".datepicker-"+f.modes[this.viewMode].clsName).css("display","block"),this.updateNavArrows()}};var d=function(e,i){this.element=t(e),this.inputs=t.map(i.inputs,function(t){return t.jquery?t[0]:t}),delete i.inputs,t(this.inputs).datepicker(i).bind("changeDate",t.proxy(this.dateUpdated,this)),this.pickers=t.map(this.inputs,function(e){return t(e).data("datepicker")}),this.updateDates()};d.prototype={updateDates:function(){this.dates=t.map(this.pickers,function(t){return t.getUTCDate()}),this.updateRanges()},updateRanges:function(){var e=t.map(this.dates,function(t){return t.valueOf()});t.each(this.pickers,function(t,i){i.setRange(e)})},dateUpdated:function(e){if(!this.updating){this.updating=!0;var i=t(e.target).data("datepicker").getUTCDate(),a=t.inArray(e.target,this.inputs),s=this.inputs.length;if(-1!==a){if(t.each(this.pickers,function(t,e){e.getUTCDate()||e.setUTCDate(i)}),i<this.dates[a])for(;a>=0&&i<this.dates[a];)this.pickers[a--].setUTCDate(i);else if(i>this.dates[a])for(;a<s&&i>this.dates[a];)this.pickers[a++].setUTCDate(i);this.updateDates(),delete this.updating}}},remove:function(){t.map(this.pickers,function(t){t.remove()}),delete this.element.data().datepicker}};var l=t.fn.datepicker;t.fn.datepicker=function(e){var i,a=Array.apply(null,arguments);return a.shift(),this.each(function(){var s=t(this),n=s.data("datepicker"),r="object"==typeof e&&e;if(!n){var h=function(e,i){var a=t(e).data(),s={},n=new RegExp("^"+i.toLowerCase()+"([A-Z])");function r(t,e){return e.toLowerCase()}for(var h in i=new RegExp("^"+i.toLowerCase()),a)i.test(h)&&(s[h.replace(n,r)]=a[h]);return s}(this,"date"),l=function(e){var i={};if(p[e]||(e=e.split("-")[0],p[e])){var a=p[e];return t.each(u,function(t,e){e in a&&(i[e]=a[e])}),i}}(t.extend({},c,h,r).language),f=t.extend({},c,l,h,r);if(s.is(".input-daterange")||f.inputs){var g={inputs:f.inputs||s.find("input").toArray()};s.data("datepicker",n=new d(this,t.extend(f,g)))}else s.data("datepicker",n=new o(this,f))}if("string"==typeof e&&"function"==typeof n[e]&&void 0!==(i=n[e].apply(n,a)))return!1}),void 0!==i?i:this};var c=t.fn.datepicker.defaults={autoclose:!1,beforeShowDay:t.noop,calendarWeeks:!1,clearBtn:!1,daysOfWeekDisabled:[],endDate:1/0,forceParse:!0,format:"mm/dd/yyyy",keyboardNavigation:!0,language:"en",minViewMode:0,multidate:!1,multidateSeparator:",",orientation:"auto",rtl:!1,startDate:-1/0,startView:0,todayBtn:!1,todayHighlight:!1,weekStart:0},u=t.fn.datepicker.locale_opts=["format","rtl","weekStart"];t.fn.datepicker.Constructor=o;var p=t.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa","Su"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear"}},f={modes:[{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],isLeapYear:function(t){return t%4==0&&t%100!=0||t%400==0},getDaysInMonth:function(t,e){return[31,f.isLeapYear(t)?29:28,31,30,31,30,31,31,30,31,30,31][e]},validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,parseFormat:function(t){var e=t.replace(this.validParts,"\0").split("\0"),i=t.match(this.validParts);if(!e||!e.length||!i||0===i.length)throw new Error("Invalid date format.");return{separators:e,parts:i}},parseDate:function(e,i,s){if(e){if(e instanceof Date)return e;"string"==typeof i&&(i=f.parseFormat(i));var n,r,h,d=/([\-+]\d+)([dmwy])/,l=e.match(/([\-+]\d+)([dmwy])/g);if(/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(e)){for(e=new Date,h=0;h<l.length;h++)switch(n=d.exec(l[h]),r=parseInt(n[1]),n[2]){case"d":e.setUTCDate(e.getUTCDate()+r);break;case"m":e=o.prototype.moveMonth.call(o.prototype,e,r);break;case"w":e.setUTCDate(e.getUTCDate()+7*r);break;case"y":e=o.prototype.moveYear.call(o.prototype,e,r)}return a(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),0,0,0)}l=e&&e.match(this.nonpunctuation)||[],e=new Date;var c,u,g={},v=["yyyy","yy","M","MM","m","mm","d","dd"],D={yyyy:function(t,e){return t.setUTCFullYear(e)},yy:function(t,e){return t.setUTCFullYear(2e3+e)},m:function(t,e){if(isNaN(t))return t;for(e-=1;e<0;)e+=12;for(e%=12,t.setUTCMonth(e);t.getUTCMonth()!==e;)t.setUTCDate(t.getUTCDate()-1);return t},d:function(t,e){return t.setUTCDate(e)}};D.M=D.MM=D.mm=D.m,D.dd=D.d,e=a(e.getFullYear(),e.getMonth(),e.getDate(),0,0,0);var m=i.parts.slice();if(l.length!==m.length&&(m=t(m).filter(function(e,i){return-1!==t.inArray(i,v)}).toArray()),l.length===m.length){var y,w,k;for(h=0,y=m.length;h<y;h++){if(c=parseInt(l[h],10),n=m[h],isNaN(c))switch(n){case"MM":u=t(p[s].months).filter(_),c=t.inArray(u[0],p[s].months)+1;break;case"M":u=t(p[s].monthsShort).filter(_),c=t.inArray(u[0],p[s].monthsShort)+1}g[n]=c}for(h=0;h<v.length;h++)(k=v[h])in g&&!isNaN(g[k])&&(w=new Date(e),D[k](w,g[k]),isNaN(w)||(e=w))}return e}function _(){var t=this.slice(0,l[h].length);return t===l[h].slice(0,t.length)}},formatDate:function(e,i,a){if(!e)return"";"string"==typeof i&&(i=f.parseFormat(i));var s={d:e.getUTCDate(),D:p[a].daysShort[e.getUTCDay()],DD:p[a].days[e.getUTCDay()],m:e.getUTCMonth()+1,M:p[a].monthsShort[e.getUTCMonth()],MM:p[a].months[e.getUTCMonth()],yy:e.getUTCFullYear().toString().substring(2),yyyy:e.getUTCFullYear()};s.dd=(s.d<10?"0":"")+s.d,s.mm=(s.m<10?"0":"")+s.m,e=[];for(var n=t.extend([],i.separators),r=0,h=i.parts.length;r<=h;r++)n.length&&e.push(n.shift()),e.push(s[i.parts[r]]);return e.join("")},headTemplate:'<thead><tr><th class="prev">&laquo;</th><th colspan="5" class="datepicker-switch"></th><th class="next">&raquo;</th></tr></thead>',contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};f.template='<div class="datepicker"><div class="datepicker-days"><table class=" table-condensed">'+f.headTemplate+"<tbody></tbody>"+f.footTemplate+'</table></div><div class="datepicker-months"><table class="table-condensed">'+f.headTemplate+f.contTemplate+f.footTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+f.headTemplate+f.contTemplate+f.footTemplate+"</table></div></div>",t.fn.datepicker.DPGlobal=f,t.fn.datepicker.noConflict=function(){return t.fn.datepicker=l,this},t(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',function(e){var i=t(this);i.data("datepicker")||(e.preventDefault(),i.datepicker("show"))}),t(function(){t('[data-provide="datepicker-inline"]').datepicker()})}(window.jQuery);